// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// CreateProductErrorItem defines model for CreateProductErrorItem.
type CreateProductErrorItem struct {
	// Message Error message describing why the product creation failed
	Message string `json:"message"`
}

// CreateProductsRequest defines model for CreateProductsRequest.
type CreateProductsRequest struct {
	// Quantity number of mock entities
	Quantity int `json:"quantity"`
}

// CreateProductsResponse defines model for CreateProductsResponse.
type CreateProductsResponse struct {
	// Errors Array of errors for failed product creations
	Errors []CreateProductErrorItem `json:"errors"`

	// ProductsId IDs of products that were successfully created
	ProductsId []string `json:"productsId"`
	Quantity   int      `json:"quantity"`
}

// CreateProductsResponseError defines model for CreateProductsResponseError.
type CreateProductsResponseError struct {
	Message string `json:"message"`
}

// DeleteProductsRequest defines model for DeleteProductsRequest.
type DeleteProductsRequest struct {
	// Id IDs of products that should be removed
	Id []string `json:"id"`
}

// DeleteProductsResponse defines model for DeleteProductsResponse.
type DeleteProductsResponse struct {
	// Id IDs of products that were successfully removed
	Id       []string `json:"id"`
	Quantity int      `json:"quantity"`
}

// DeleteProductsResponseError defines model for DeleteProductsResponseError.
type DeleteProductsResponseError struct {
	Message string `json:"message"`
}

// ErrorInputResponse defines model for ErrorInputResponse.
type ErrorInputResponse struct {
	Message string `json:"message"`
}

// DeleteProductsJSONRequestBody defines body for DeleteProducts for application/json ContentType.
type DeleteProductsJSONRequestBody = DeleteProductsRequest

// CreateProductsJSONRequestBody defines body for CreateProducts for application/json ContentType.
type CreateProductsJSONRequestBody = CreateProductsRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete N-products
	// (DELETE /products)
	DeleteProducts(w http.ResponseWriter, r *http.Request)
	// Create N-products
	// (POST /products)
	CreateProducts(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Delete N-products
// (DELETE /products)
func (_ Unimplemented) DeleteProducts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create N-products
// (POST /products)
func (_ Unimplemented) CreateProducts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteProducts operation middleware
func (siw *ServerInterfaceWrapper) DeleteProducts(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProducts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProducts operation middleware
func (siw *ServerInterfaceWrapper) CreateProducts(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProducts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/products", wrapper.DeleteProducts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/products", wrapper.CreateProducts)
	})

	return r
}

type DeleteProductsRequestObject struct {
	Body *DeleteProductsJSONRequestBody
}

type DeleteProductsResponseObject interface {
	VisitDeleteProductsResponse(w http.ResponseWriter) error
}

type DeleteProducts200JSONResponse DeleteProductsResponse

func (response DeleteProducts200JSONResponse) VisitDeleteProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProducts400JSONResponse DeleteProductsResponseError

func (response DeleteProducts400JSONResponse) VisitDeleteProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProducts422JSONResponse ErrorInputResponse

func (response DeleteProducts422JSONResponse) VisitDeleteProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProductsRequestObject struct {
	Body *CreateProductsJSONRequestBody
}

type CreateProductsResponseObject interface {
	VisitCreateProductsResponse(w http.ResponseWriter) error
}

type CreateProducts200JSONResponse CreateProductsResponse

func (response CreateProducts200JSONResponse) VisitCreateProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProducts400JSONResponse CreateProductsResponseError

func (response CreateProducts400JSONResponse) VisitCreateProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProducts422JSONResponse ErrorInputResponse

func (response CreateProducts422JSONResponse) VisitCreateProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Delete N-products
	// (DELETE /products)
	DeleteProducts(ctx context.Context, request DeleteProductsRequestObject) (DeleteProductsResponseObject, error)
	// Create N-products
	// (POST /products)
	CreateProducts(ctx context.Context, request CreateProductsRequestObject) (CreateProductsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// DeleteProducts operation middleware
func (sh *strictHandler) DeleteProducts(w http.ResponseWriter, r *http.Request) {
	var request DeleteProductsRequestObject

	var body DeleteProductsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProducts(ctx, request.(DeleteProductsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProducts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProductsResponseObject); ok {
		if err := validResponse.VisitDeleteProductsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProducts operation middleware
func (sh *strictHandler) CreateProducts(w http.ResponseWriter, r *http.Request) {
	var request CreateProductsRequestObject

	var body CreateProductsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProducts(ctx, request.(CreateProductsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProducts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProductsResponseObject); ok {
		if err := validResponse.VisitCreateProductsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
