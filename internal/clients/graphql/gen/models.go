// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gql_gen

import (
	"bytes"
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

type ProductImageInput struct {
	// order - starts from 1 not from zero-index
	Order int            `json:"order"`
	Image graphql.Upload `json:"image"`
}

type CategoryType string

const (
	CategoryTypeBag      CategoryType = "BAG"
	CategoryTypeOther    CategoryType = "OTHER"
	CategoryTypeBackpack CategoryType = "BACKPACK"
	CategoryTypeSuitcase CategoryType = "SUITCASE"
)

var AllCategoryType = []CategoryType{
	CategoryTypeBag,
	CategoryTypeOther,
	CategoryTypeBackpack,
	CategoryTypeSuitcase,
}

func (e CategoryType) IsValid() bool {
	switch e {
	case CategoryTypeBag, CategoryTypeOther, CategoryTypeBackpack, CategoryTypeSuitcase:
		return true
	}
	return false
}

func (e CategoryType) String() string {
	return string(e)
}

func (e *CategoryType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CategoryType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CategoryType", str)
	}
	return nil
}

func (e CategoryType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *CategoryType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e CategoryType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type Gender string

const (
	GenderFemale Gender = "FEMALE"
	GenderMale   Gender = "MALE"
	GenderUnisex Gender = "UNISEX"
)

var AllGender = []Gender{
	GenderFemale,
	GenderMale,
	GenderUnisex,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderFemale, GenderMale, GenderUnisex:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Gender) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Gender) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type OrderPaymentMethod string

const (
	OrderPaymentMethodOnline   OrderPaymentMethod = "ONLINE"
	OrderPaymentMethodDelivery OrderPaymentMethod = "DELIVERY"
)

var AllOrderPaymentMethod = []OrderPaymentMethod{
	OrderPaymentMethodOnline,
	OrderPaymentMethodDelivery,
}

func (e OrderPaymentMethod) IsValid() bool {
	switch e {
	case OrderPaymentMethodOnline, OrderPaymentMethodDelivery:
		return true
	}
	return false
}

func (e OrderPaymentMethod) String() string {
	return string(e)
}

func (e *OrderPaymentMethod) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderPaymentMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderPaymentMethod", str)
	}
	return nil
}

func (e OrderPaymentMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *OrderPaymentMethod) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e OrderPaymentMethod) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type OrderStatus string

const (
	OrderStatusCreated   OrderStatus = "CREATED"
	OrderStatusProcessed OrderStatus = "PROCESSED"
	OrderStatusRejected  OrderStatus = "REJECTED"
	OrderStatusSent      OrderStatus = "SENT"
	OrderStatusDone      OrderStatus = "DONE"
	OrderStatusReturned  OrderStatus = "RETURNED"
)

var AllOrderStatus = []OrderStatus{
	OrderStatusCreated,
	OrderStatusProcessed,
	OrderStatusRejected,
	OrderStatusSent,
	OrderStatusDone,
	OrderStatusReturned,
}

func (e OrderStatus) IsValid() bool {
	switch e {
	case OrderStatusCreated, OrderStatusProcessed, OrderStatusRejected, OrderStatusSent, OrderStatusDone, OrderStatusReturned:
		return true
	}
	return false
}

func (e OrderStatus) String() string {
	return string(e)
}

func (e *OrderStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatus", str)
	}
	return nil
}

func (e OrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *OrderStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e OrderStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PaymentPurpose string

const (
	PaymentPurposeDelivery         PaymentPurpose = "DELIVERY"
	PaymentPurposeDeliveryAndOrder PaymentPurpose = "DELIVERY_AND_ORDER"
)

var AllPaymentPurpose = []PaymentPurpose{
	PaymentPurposeDelivery,
	PaymentPurposeDeliveryAndOrder,
}

func (e PaymentPurpose) IsValid() bool {
	switch e {
	case PaymentPurposeDelivery, PaymentPurposeDeliveryAndOrder:
		return true
	}
	return false
}

func (e PaymentPurpose) String() string {
	return string(e)
}

func (e *PaymentPurpose) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentPurpose(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentPurpose", str)
	}
	return nil
}

func (e PaymentPurpose) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PaymentPurpose) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PaymentPurpose) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PaymentStatus string

const (
	PaymentStatusAwaitingConfirmation PaymentStatus = "AWAITING_CONFIRMATION"
	PaymentStatusConfirmed            PaymentStatus = "CONFIRMED"
	PaymentStatusRejected             PaymentStatus = "REJECTED"
)

var AllPaymentStatus = []PaymentStatus{
	PaymentStatusAwaitingConfirmation,
	PaymentStatusConfirmed,
	PaymentStatusRejected,
}

func (e PaymentStatus) IsValid() bool {
	switch e {
	case PaymentStatusAwaitingConfirmation, PaymentStatusConfirmed, PaymentStatusRejected:
		return true
	}
	return false
}

func (e PaymentStatus) String() string {
	return string(e)
}

func (e *PaymentStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentStatus", str)
	}
	return nil
}

func (e PaymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PaymentStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PaymentStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ProductFilterSortBy string

const (
	ProductFilterSortByDefault ProductFilterSortBy = "DEFAULT"
	// PRICE_ASC - from cheap to expensive
	ProductFilterSortByPriceAsc ProductFilterSortBy = "PRICE_ASC"
	// PRICE_DESC - from expensive to cheap
	ProductFilterSortByPriceDesc ProductFilterSortBy = "PRICE_DESC"
)

var AllProductFilterSortBy = []ProductFilterSortBy{
	ProductFilterSortByDefault,
	ProductFilterSortByPriceAsc,
	ProductFilterSortByPriceDesc,
}

func (e ProductFilterSortBy) IsValid() bool {
	switch e {
	case ProductFilterSortByDefault, ProductFilterSortByPriceAsc, ProductFilterSortByPriceDesc:
		return true
	}
	return false
}

func (e ProductFilterSortBy) String() string {
	return string(e)
}

func (e *ProductFilterSortBy) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductFilterSortBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductFilterSortBy", str)
	}
	return nil
}

func (e ProductFilterSortBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ProductFilterSortBy) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ProductFilterSortBy) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ProductTag string

const (
	ProductTagTop   ProductTag = "TOP"
	ProductTagStock ProductTag = "STOCK"
	ProductTagNew   ProductTag = "NEW"
)

var AllProductTag = []ProductTag{
	ProductTagTop,
	ProductTagStock,
	ProductTagNew,
}

func (e ProductTag) IsValid() bool {
	switch e {
	case ProductTagTop, ProductTagStock, ProductTagNew:
		return true
	}
	return false
}

func (e ProductTag) String() string {
	return string(e)
}

func (e *ProductTag) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductTag(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductTag", str)
	}
	return nil
}

func (e ProductTag) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ProductTag) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ProductTag) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type Role string

const (
	RoleAdmin    Role = "ADMIN"
	RoleManager  Role = "MANAGER"
	RoleCustomer Role = "CUSTOMER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleManager,
	RoleCustomer,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleManager, RoleCustomer:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Role) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Role) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SupplierService string

const (
	SupplierServiceNovap SupplierService = "NOVAP"
	SupplierServiceUkrp  SupplierService = "UKRP"
)

var AllSupplierService = []SupplierService{
	SupplierServiceNovap,
	SupplierServiceUkrp,
}

func (e SupplierService) IsValid() bool {
	switch e {
	case SupplierServiceNovap, SupplierServiceUkrp:
		return true
	}
	return false
}

func (e SupplierService) String() string {
	return string(e)
}

func (e *SupplierService) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SupplierService(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SupplierService", str)
	}
	return nil
}

func (e SupplierService) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SupplierService) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SupplierService) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
