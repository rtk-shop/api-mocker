// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package gql_gen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/Yamashou/gqlgenc/clientv2"
)

type GenGraphQLClient interface {
	CreateProduct(ctx context.Context, title string, sku string, basePrice float64, amount int, gender Gender, category CategoryType, preview graphql.Upload, images []*ProductImageInput, description string, sizeName string, brandName string, interceptors ...clientv2.RequestInterceptor) (*CreateProduct, error)
	DeleteProduct(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteProduct, error)
	ProductByID(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*ProductByID, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli clientv2.HttpClient, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) GenGraphQLClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type CreateProduct_CreateProduct struct {
	BasePrice    float64 "json:\"basePrice\" graphql:\"basePrice\""
	CurrentPrice float64 "json:\"currentPrice\" graphql:\"currentPrice\""
	ID           string  "json:\"id\" graphql:\"id\""
	Title        string  "json:\"title\" graphql:\"title\""
}

func (t *CreateProduct_CreateProduct) GetBasePrice() float64 {
	if t == nil {
		t = &CreateProduct_CreateProduct{}
	}
	return t.BasePrice
}
func (t *CreateProduct_CreateProduct) GetCurrentPrice() float64 {
	if t == nil {
		t = &CreateProduct_CreateProduct{}
	}
	return t.CurrentPrice
}
func (t *CreateProduct_CreateProduct) GetID() string {
	if t == nil {
		t = &CreateProduct_CreateProduct{}
	}
	return t.ID
}
func (t *CreateProduct_CreateProduct) GetTitle() string {
	if t == nil {
		t = &CreateProduct_CreateProduct{}
	}
	return t.Title
}

type DeleteProduct_DeleteProduct struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteProduct_DeleteProduct) GetID() string {
	if t == nil {
		t = &DeleteProduct_DeleteProduct{}
	}
	return t.ID
}

type ProductByID_Product_Product_AvailableSizes struct {
	ProductID string "json:\"productId\" graphql:\"productId\""
	Size      string "json:\"size\" graphql:\"size\""
}

func (t *ProductByID_Product_Product_AvailableSizes) GetProductID() string {
	if t == nil {
		t = &ProductByID_Product_Product_AvailableSizes{}
	}
	return t.ProductID
}
func (t *ProductByID_Product_Product_AvailableSizes) GetSize() string {
	if t == nil {
		t = &ProductByID_Product_Product_AvailableSizes{}
	}
	return t.Size
}

type ProductByID_Product_Product struct {
	ID             string                                        "json:\"id\" graphql:\"id\""
	Title          string                                        "json:\"title\" graphql:\"title\""
	Sku            string                                        "json:\"sku\" graphql:\"sku\""
	Gender         Gender                                        "json:\"gender\" graphql:\"gender\""
	CurrentPrice   float64                                       "json:\"currentPrice\" graphql:\"currentPrice\""
	BasePrice      float64                                       "json:\"basePrice\" graphql:\"basePrice\""
	Amount         int                                           "json:\"amount\" graphql:\"amount\""
	Tag            *ProductTag                                   "json:\"tag,omitempty\" graphql:\"tag\""
	Preview        string                                        "json:\"preview\" graphql:\"preview\""
	Category       CategoryType                                  "json:\"category\" graphql:\"category\""
	InStock        bool                                          "json:\"inStock\" graphql:\"inStock\""
	ColorName      string                                        "json:\"colorName\" graphql:\"colorName\""
	SizeName       string                                        "json:\"sizeName\" graphql:\"sizeName\""
	BrandName      string                                        "json:\"brandName\" graphql:\"brandName\""
	Images         []string                                      "json:\"images\" graphql:\"images\""
	IsHidden       bool                                          "json:\"isHidden\" graphql:\"isHidden\""
	UpdatedAt      string                                        "json:\"updatedAt\" graphql:\"updatedAt\""
	CreatedAt      string                                        "json:\"createdAt\" graphql:\"createdAt\""
	AvailableSizes []*ProductByID_Product_Product_AvailableSizes "json:\"availableSizes\" graphql:\"availableSizes\""
}

func (t *ProductByID_Product_Product) GetID() string {
	if t == nil {
		t = &ProductByID_Product_Product{}
	}
	return t.ID
}
func (t *ProductByID_Product_Product) GetTitle() string {
	if t == nil {
		t = &ProductByID_Product_Product{}
	}
	return t.Title
}
func (t *ProductByID_Product_Product) GetSku() string {
	if t == nil {
		t = &ProductByID_Product_Product{}
	}
	return t.Sku
}
func (t *ProductByID_Product_Product) GetGender() *Gender {
	if t == nil {
		t = &ProductByID_Product_Product{}
	}
	return &t.Gender
}
func (t *ProductByID_Product_Product) GetCurrentPrice() float64 {
	if t == nil {
		t = &ProductByID_Product_Product{}
	}
	return t.CurrentPrice
}
func (t *ProductByID_Product_Product) GetBasePrice() float64 {
	if t == nil {
		t = &ProductByID_Product_Product{}
	}
	return t.BasePrice
}
func (t *ProductByID_Product_Product) GetAmount() int {
	if t == nil {
		t = &ProductByID_Product_Product{}
	}
	return t.Amount
}
func (t *ProductByID_Product_Product) GetTag() *ProductTag {
	if t == nil {
		t = &ProductByID_Product_Product{}
	}
	return t.Tag
}
func (t *ProductByID_Product_Product) GetPreview() string {
	if t == nil {
		t = &ProductByID_Product_Product{}
	}
	return t.Preview
}
func (t *ProductByID_Product_Product) GetCategory() *CategoryType {
	if t == nil {
		t = &ProductByID_Product_Product{}
	}
	return &t.Category
}
func (t *ProductByID_Product_Product) GetInStock() bool {
	if t == nil {
		t = &ProductByID_Product_Product{}
	}
	return t.InStock
}
func (t *ProductByID_Product_Product) GetColorName() string {
	if t == nil {
		t = &ProductByID_Product_Product{}
	}
	return t.ColorName
}
func (t *ProductByID_Product_Product) GetSizeName() string {
	if t == nil {
		t = &ProductByID_Product_Product{}
	}
	return t.SizeName
}
func (t *ProductByID_Product_Product) GetBrandName() string {
	if t == nil {
		t = &ProductByID_Product_Product{}
	}
	return t.BrandName
}
func (t *ProductByID_Product_Product) GetImages() []string {
	if t == nil {
		t = &ProductByID_Product_Product{}
	}
	return t.Images
}
func (t *ProductByID_Product_Product) GetIsHidden() bool {
	if t == nil {
		t = &ProductByID_Product_Product{}
	}
	return t.IsHidden
}
func (t *ProductByID_Product_Product) GetUpdatedAt() string {
	if t == nil {
		t = &ProductByID_Product_Product{}
	}
	return t.UpdatedAt
}
func (t *ProductByID_Product_Product) GetCreatedAt() string {
	if t == nil {
		t = &ProductByID_Product_Product{}
	}
	return t.CreatedAt
}
func (t *ProductByID_Product_Product) GetAvailableSizes() []*ProductByID_Product_Product_AvailableSizes {
	if t == nil {
		t = &ProductByID_Product_Product{}
	}
	return t.AvailableSizes
}

type ProductByID_Product_NotFound struct {
	Message string "json:\"message\" graphql:\"message\""
}

func (t *ProductByID_Product_NotFound) GetMessage() string {
	if t == nil {
		t = &ProductByID_Product_NotFound{}
	}
	return t.Message
}

type ProductByID_Product struct {
	NotFound ProductByID_Product_NotFound "graphql:\"... on NotFound\""
	Product  ProductByID_Product_Product  "graphql:\"... on Product\""
	Typename *string                      "json:\"__typename,omitempty\" graphql:\"__typename\""
}

func (t *ProductByID_Product) GetNotFound() *ProductByID_Product_NotFound {
	if t == nil {
		t = &ProductByID_Product{}
	}
	return &t.NotFound
}
func (t *ProductByID_Product) GetProduct() *ProductByID_Product_Product {
	if t == nil {
		t = &ProductByID_Product{}
	}
	return &t.Product
}
func (t *ProductByID_Product) GetTypename() *string {
	if t == nil {
		t = &ProductByID_Product{}
	}
	return t.Typename
}

type CreateProduct struct {
	CreateProduct CreateProduct_CreateProduct "json:\"createProduct\" graphql:\"createProduct\""
}

func (t *CreateProduct) GetCreateProduct() *CreateProduct_CreateProduct {
	if t == nil {
		t = &CreateProduct{}
	}
	return &t.CreateProduct
}

type DeleteProduct struct {
	DeleteProduct DeleteProduct_DeleteProduct "json:\"deleteProduct\" graphql:\"deleteProduct\""
}

func (t *DeleteProduct) GetDeleteProduct() *DeleteProduct_DeleteProduct {
	if t == nil {
		t = &DeleteProduct{}
	}
	return &t.DeleteProduct
}

type ProductByID struct {
	Product ProductByID_Product "json:\"product\" graphql:\"product\""
}

func (t *ProductByID) GetProduct() *ProductByID_Product {
	if t == nil {
		t = &ProductByID{}
	}
	return &t.Product
}

const CreateProductDocument = `mutation CreateProduct ($title: String!, $sku: String!, $basePrice: Float!, $amount: Int!, $gender: Gender!, $category: CategoryType!, $preview: Upload!, $images: [ProductImageInput!]!, $description: HTML!, $sizeName: String!, $brandName: String!) {
	createProduct(input: {title:$title,sku:$sku,basePrice:$basePrice,amount:$amount,gender:$gender,category:$category,preview:$preview,images:$images,description:$description,sizeName:$sizeName,brandName:$brandName}) {
		id
		title
		currentPrice
		basePrice
	}
}
`

func (c *Client) CreateProduct(ctx context.Context, title string, sku string, basePrice float64, amount int, gender Gender, category CategoryType, preview graphql.Upload, images []*ProductImageInput, description string, sizeName string, brandName string, interceptors ...clientv2.RequestInterceptor) (*CreateProduct, error) {
	vars := map[string]any{
		"title":       title,
		"sku":         sku,
		"basePrice":   basePrice,
		"amount":      amount,
		"gender":      gender,
		"category":    category,
		"preview":     preview,
		"images":      images,
		"description": description,
		"sizeName":    sizeName,
		"brandName":   brandName,
	}

	var res CreateProduct
	if err := c.Client.Post(ctx, "CreateProduct", CreateProductDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteProductDocument = `mutation DeleteProduct ($id: ID!) {
	deleteProduct(id: $id) {
		id
	}
}
`

func (c *Client) DeleteProduct(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteProduct, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteProduct
	if err := c.Client.Post(ctx, "DeleteProduct", DeleteProductDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ProductByIDDocument = `query ProductByID ($id: ID!) {
	product(id: $id) {
		__typename
		... on Product {
			id
			title
			sku
			gender
			currentPrice
			basePrice
			amount
			tag
			preview
			category
			inStock
			colorName
			sizeName
			brandName
			images
			isHidden
			updatedAt
			createdAt
			availableSizes {
				size
				productId
			}
		}
		... on NotFound {
			message
		}
	}
}
`

func (c *Client) ProductByID(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*ProductByID, error) {
	vars := map[string]any{
		"id": id,
	}

	var res ProductByID
	if err := c.Client.Post(ctx, "ProductByID", ProductByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	CreateProductDocument: "CreateProduct",
	DeleteProductDocument: "DeleteProduct",
	ProductByIDDocument:   "ProductByID",
}
